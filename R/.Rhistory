status=status,
period=period,
long_x=long_x,
lat_y=lat_y,
crs = CRS("+proj=utm +zone=22J +south +datum=WGS84 +units=m +no_defs"))
#'
#' ##  Iguazutrk
Iguazutrk=rbind(Iguazu1trk,Iguazu2trk)
#'
#'
#' ##   AMAZONIA
#' # 13) Flooded  Amazonia, Mamiraua (Brazil)
Mamirauatrk <- trk.convert(data = Mamiraua,
.x=utm_x,
.y=utm_y,
.t=date,
id=id,
project_region=project_region,
sex=sex,
age=age,
weight=weight,
status=status,
period=period,
long_x=long_x,
lat_y=lat_y,
crs = CRS("+proj=utm +zone=20M +south +datum=WGS84 +units=m +no_defs"))
#'
#'
#' ## 14        Dry/ East Amazonia, IOP PA, translocated
iopPAtrk <- trk.convert(data = iopPA,
.x=utm_x,
.y=utm_y,
.t=date,
id=id,
project_region=project_region,
sex=sex,
age=age,
weight=weight,
status=status,
period=period,
long_x=long_x,
lat_y=lat_y,
crs = CRS("+proj=utm +zone=22M +south +datum=WGS84 +units=m +no_defs"))
#'
#'
#' # Greater Lacandona, Mexico
#'
#' 15 Lacandona
Lacandonatrk <- trk.convert(data = Lacandona,
.x=utm_x,
.y=utm_y,
.t=date,
id=id,
project_region=project_region,
sex=sex,
age=age,
weight=weight,
status=status,
period=period,
long_x=long_x,
lat_y=lat_y,
crs = CRS("+proj=utm +zone=15Q +south +datum=WGS84 +units=m +no_defs"))
#'
#'
#' ## 16) MexEast, Mexico
MexEasttrk <- trk.convert(data = MexEast,
.x=utm_x,
.y=utm_y,
.t=date,
id=id,
project_region=project_region,
sex=sex,
age=age,
weight=weight,
status=status,
period=period,
long_x=long_x,
lat_y=lat_y,
crs = CRS("+proj=utm +zone=16Q +south +datum=WGS84 +units=m +no_defs"))
#'
#'
#' ## Sonora, Mexico
#'
#' # 17)  Sonora
Sonoratrk <- trk.convert(data = Sonora,
.x=utm_x,
.y=utm_y,
.t=date,
id=id,
project_region=project_region,
sex=sex,
age=age,
weight=weight,
status=status,
period=period,
long_x=long_x,
lat_y=lat_y,
crs = CRS("+proj=utm +zone=12R +south +datum=WGS84 +units=m +no_defs"))
#'
#'
#' ##   PANTANAL
#'
#'  # 18) PantanalTotal Brazil&Paraguay  -  7 Projects in total, all in the same UTM zone
Pantanaltrk <- trk.convert(data = Pantanal,
.x=utm_x,
.y=utm_y,
.t=date,
id=id,
project_region=project_region,
sex=sex,
age=age,
weight=weight,
status=status,
period=period,
long_x=long_x,
lat_y=lat_y,
crs = CRS("+proj=utm +zone=21K +south +datum=WGS84 +units=m +no_defs"))
#'
#' # Objects for Pantanal project regions
Oncafaritrk=Pantanaltrk %>% filter(project_region == "Oncafari")
Paraguaytrk=Pantanaltrk %>% filter(project_region == "Pantanal Paraguay")
Panthera1trk=Pantanaltrk %>% filter(project_region == "Panthera1")
Panthera2trk=Pantanaltrk %>% filter(project_region == "Panthera2")
RioNegrotrk=Pantanaltrk %>% filter(project_region == "Rio Negro")
SaoBentotrk=Pantanaltrk %>% filter(project_region == "Sao Bento")
Taiamatrk=Pantanaltrk %>% filter(project_region == "Taiama")
#'
#'
#' ##    ALL  JAGUARS  trk =>     jaguartrk
#'
#' # All Project regions trk
jaguartrk=rbind(AFW1trk,AFW2trk,Caatingatrk,Cerrado1trk,Cerrado2trk,CRicatrk,Drychtrk, Hchtrk,FPytrk,Iguazutrk,
Mamirauatrk,iopPAtrk,Lacandonatrk, MexEasttrk, Sonoratrk,Oncafaritrk,Paraguaytrk,Panthera1trk,
Panthera2trk,RioNegrotrk,SaoBentotrk,Taiamatrk)
#'
#'
#' Dataframe for each individual (run only if need any specic individual)
X1=subset(jaguar_df,id=='1')
X2=subset(jaguar_df,id=='2')
X3=subset(jaguar_df,id=='3')
X4=subset(jaguar_df,id=='4')
X5=subset(jaguar_df,id=='5')
X6=subset(jaguar_df,id=='6')
X7=subset(jaguar_df,id=='7')
X8=subset(jaguar_df,id=='8')
X9=subset(jaguar_df,id=='9')
X10=subset(jaguar_df,id=='10')
X11=subset(jaguar_df,id=='11')
X12=subset(jaguar_df,id=='12')
X13=subset(jaguar_df,id=='13')
X14=subset(jaguar_df,id=='14')
X15=subset(jaguar_df,id=='15')
X16=subset(jaguar_df,id=='16')
X17=subset(jaguar_df,id=='17')
X18=subset(jaguar_df,id=='18')
X19=subset(jaguar_df,id=='19')
X20=subset(jaguar_df,id=='20')
X21=subset(jaguar_df,id=='21')
X22=subset(jaguar_df,id=='22')
X23=subset(jaguar_df,id=='23')
X24=subset(jaguar_df,id=='24')
X25=subset(jaguar_df,id=='25')
X26=subset(jaguar_df,id=='26')
X27=subset(jaguar_df,id=='27')
X28=subset(jaguar_df,id=='28')
X29=subset(jaguar_df,id=='29')
X30=subset(jaguar_df,id=='30')
X31=subset(jaguar_df,id=='31')
X32=subset(jaguar_df,id=='32')
X33=subset(jaguar_df,id=='33')
X34=subset(jaguar_df,id=='34')
X35=subset(jaguar_df,id=='35')
X36=subset(jaguar_df,id=='36')
X37=subset(jaguar_df,id=='37')
X38=subset(jaguar_df,id=='38')
X39=subset(jaguar_df,id=='39')
X40=subset(jaguar_df,id=='40')
X41=subset(jaguar_df,id=='41')
X42=subset(jaguar_df,id=='42')
X43=subset(jaguar_df,id=='43')
X44=subset(jaguar_df,id=='44')
X45=subset(jaguar_df,id=='45')
X46=subset(jaguar_df,id=='46')
X47=subset(jaguar_df,id=='47')
X48=subset(jaguar_df,id=='48')
X49=subset(jaguar_df,id=='49')
X50=subset(jaguar_df,id=='50')
X51=subset(jaguar_df,id=='51')
X52=subset(jaguar_df,id=='52')
X53=subset(jaguar_df,id=='53')
X54=subset(jaguar_df,id=='54')
X55=subset(jaguar_df,id=='55')
X56=subset(jaguar_df,id=='56')
X57=subset(jaguar_df,id=='57')
X58=subset(jaguar_df,id=='58')
X59=subset(jaguar_df,id=='59')
X60=subset(jaguar_df,id=='60')
X61=subset(jaguar_df,id=='61')
X62=subset(jaguar_df,id=='62')
X63=subset(jaguar_df,id=='63')
X64=subset(jaguar_df,id=='64')
X65=subset(jaguar_df,id=='65')
X66=subset(jaguar_df,id=='66')
X67=subset(jaguar_df,id=='67')
X68=subset(jaguar_df,id=='68')
X69=subset(jaguar_df,id=='69')
X70=subset(jaguar_df,id=='70')
X71=subset(jaguar_df,id=='71')
X72=subset(jaguar_df,id=='72')
X73=subset(jaguar_df,id=='73')
X74=subset(jaguar_df,id=='74')
X75=subset(jaguar_df,id=='75')
X76=subset(jaguar_df,id=='76')
X77=subset(jaguar_df,id=='77')
X78=subset(jaguar_df,id=='78')
X79=subset(jaguar_df,id=='79')
X80=subset(jaguar_df,id=='80')
X81=subset(jaguar_df,id=='81')
X82=subset(jaguar_df,id=='82')
X83=subset(jaguar_df,id=='83')
X84=subset(jaguar_df,id=='84')
X85=subset(jaguar_df,id=='85')
X86=subset(jaguar_df,id=='86')
X87=subset(jaguar_df,id=='87')
X88=subset(jaguar_df,id=='88')
X89=subset(jaguar_df,id=='89')
X90=subset(jaguar_df,id=='90')
X91=subset(jaguar_df,id=='91')
X92=subset(jaguar_df,id=='92')
X93=subset(jaguar_df,id=='93')
X94=subset(jaguar_df,id=='94')
X95=subset(jaguar_df,id=='95')
X96=subset(jaguar_df,id=='96')
X97=subset(jaguar_df,id=='97')
X98=subset(jaguar_df,id=='98')
X99=subset(jaguar_df,id=='99')
X100=subset(jaguar_df,id=='100')
X101=subset(jaguar_df,id=='101')
X102=subset(jaguar_df,id=='102')
X103=subset(jaguar_df,id=='103')
X104=subset(jaguar_df,id=='104')
X105=subset(jaguar_df,id=='105')
X106=subset(jaguar_df,id=='106')
X107=subset(jaguar_df,id=='107')
X108=subset(jaguar_df,id=='108')
X109=subset(jaguar_df,id=='109')
X110=subset(jaguar_df,id=='110')
X111=subset(jaguar_df,id=='111')
X112=subset(jaguar_df,id=='112')
X113=subset(jaguar_df,id=='113')
X114=subset(jaguar_df,id=='114')
X115=subset(jaguar_df,id=='115')
X116=subset(jaguar_df,id=='116')
X117=subset(jaguar_df,id=='117')
#'
#' Produce an output using ezknitr
ezspin(file = "JaguarDataPrep.R", out_dir = "reports",
params = list("DATASET_NAME" = "jaguar.dat"),
keep_html = TRUE, keep_rmd = TRUE)
open_output_dir()
#' Other info
sessionInfo()
proc.time()
#' ---
#' title: "Jaguar Data Preparation"
#' authors: "Alan E. de Barros,Bernardo Niebuhr, Vanesa Bejarano, Julia Oshima, Claudia Kanda, Milton Ribeiro, Ronaldo Morato, Paulo Prado"
#' date: ""
#' ---
#'
#'
#' # **Jaguar Data Preparation**
#' ### Alan E. de Barros,Bernardo Niebuhr,Vanesa Bejarano,Julia Oshima,Claudia Kanda,Milton Ribeiro,Ronaldo Morato,Paulo Prado
#' date: "March, 08 2019"
#'
#' ### Preamble
#' Adapted from Bernardo Niebuhr data preparation, Luca Borger lectures and amt's John Fieberg's scripts
#'
#'
#' For a fresh start, clean everything in working memory
rm(list= ls())
#'
#' Load packages
#' #+warning=FALSE, message=FALSE
#'
if(!require(install.load)) install.packages('install.load'); library(install.load)
install.load::install_load("move", "adehabitatLT", "amt") # Movement packages
install.load::install_load("maptools", "raster", "rgdal","sp") # Spatial packages
install.load::install_load("colorspace","ggmap", "rgl", "lattice", "leaflet") # Visualization packages
install.load::install_load("RCurl", "dplyr", "readr", "lubridate", "tibble") # Aux packages
install.load::install_load("circular", "caTools") # Stats packages
install.load::install_load("knitr", "ezknitr") # To render documents
#'
#'
#' ## Source functions from GitHub local directory
#' Do not required to set directory if Rscript have been opened from the GitHub local directory
source("DataPrepFunctions.R")
#'
#' Load the data and create a dataframe object: # (Call for ../data/filename.txt)
#'
mov.data.org <- read.delim(file="../data/mov.data.org.txt")
mov.data.org <- dplyr::select(mov.data.org, -(individual.taxon.canonical.name:tag.local.identifier))
#'
#' ### Add Individual info  (see older development files for details)
info <- read.delim(file="../data/info.txt")
#'
#' Merge movement with individual info/parameters
merged<- merge(mov.data.org,info)
mov.data.org <- merged
#'
#' Organize data
#'
#' Test
#' get.year(time.stamp = mov.data.org$timestamp[10000])
#' All individuals
year <- as.numeric(sapply(mov.data.org$timestamp, get.year))
#' Add 1900/2000
new.year <- as.character(ifelse(year > 50, year + 1900, year + 2000))
#' Test
set.year(time.stamp = as.character(mov.data.org$timestamp[10000]), year = '2013')
#' All individuals
date.time <- as.character(mapply(set.year, as.character(mov.data.org$timestamp),
new.year))
#' Date/Time as POSIXct object
mov.data.org$timestamp.posix <- as.POSIXct(date.time,
format = "%m/%d/%Y %H:%M", tz = 'GMT')
mov.data.org$GMTtime <- mov.data.org$timestamp.posix
#'
#'
#' ## Get local time
#'
#' A column to represent the local timezone (already with the - signal) has been included to then multiply the timestamp and get the difference:
mov.data.org$local_time <- mov.data.org$timestamp.posix + mov.data.org$timezone*60*60
mov.data.org$timestamp.posix <- mov.data.org$local_time
#' Now all the (timestamp.posix)'s calculations are based on local time
#'
#'
#' ### adehabitatLT
#'
#' Transforms in ltraj object
coords <- data.frame(mov.data.org$location.long, mov.data.org$location.lat)
mov.traj <- as.ltraj(xy = coords, date=mov.data.org$timestamp.posix,
id=mov.data.org$individual.local.identifier..ID.,
burst=mov.data.org$individual.local.identifier..ID.,
infolocs = mov.data.org[,-c(3:6, ncol(mov.data.org))])
mov.traj.df <- ld(mov.traj)
#'
#'
#' ### move
# Organize data as a move package format
move.data <- move(x = mov.traj.df$x, y = mov.traj.df$y,
time = mov.traj.df$date,
proj = CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'),
data = mov.traj.df, animal = mov.traj.df$id, sensor = 'GPS')
#' move.data  (moveStack)
#' Separate individual animals' trajectories
unstacked <- split(move.data)
jaguar_df <- as(move.data, "data.frame")
#' Reclassifying variables
age <- as.numeric(levels(jaguar_df$age))[jaguar_df$age]
weight <- as.numeric(levels(jaguar_df$weight))[jaguar_df$weight]
jaguar_df$id <- as.factor(jaguar_df$individual.local.identifier..ID.)
jaguar_df$age <- age
jaguar_df$weight <- weight
#'
#' Cleaning up columns which will be in excess due to repetition of analysis
jaguar_df$dx <- NULL
jaguar_df$dy <- NULL
jaguar_df$dist <- NULL
jaguar_df$R2n <- NULL
jaguar_df$abs.angle <- NULL
jaguar_df$rel.angle  <- NULL
jaguar_df$location.lat <- NULL
jaguar_df$timestamps  <- NULL
jaguar_df$sensor <- NULL
jaguar_df$burst <- NULL
jaguar_df$optional <- NULL
jaguar_df$coords.x1 <- NULL
jaguar_df$coords.x2 <- NULL
jaguar_df$trackId <- NULL
jaguar_df$individual.local.identifier..ID.<- NULL
jaguar_df$study.name <- NULL
jaguar_df$collar_type <- NULL
jaguar_df$brand <- NULL
jaguar_df$local_time <- NULL
jaguar_df$Event_ID  <- NULL
#jaguar_df$timezone <- NULL
# jaguar_df$dt <- NULL
#'
jaguar_df$week <- as.numeric(strftime(as.POSIXlt(jaguar_df$timestamp.posix),format="%W"))
jaguar_df$day <- as.numeric(strftime(as.POSIXlt(jaguar_df$timestamp.posix),format="%j"))
jaguar_df$year <- as.numeric(strftime(as.POSIXlt(jaguar_df$timestamp.posix),format="%Y"))
jaguar_df$hour <- as.numeric(strftime(as.POSIXlt(jaguar_df$timestamp.posix),format="%H"))
jaguar_df$min <- as.numeric(strftime(as.POSIXlt(jaguar_df$timestamp.posix),format="%M"))
jaguar_df$time <- jaguar_df$hour + (jaguar_df$min)/60
#'
# day  7 to 16  and  night 19 to 4 and  sun riseset 5,6,17,18
#jaguar_df$month=as.numeric(substr(jaguar_df$date,6,7))
jaguar_df$period=ifelse(jaguar_df$hour==7,"day",
ifelse(jaguar_df$hour==8,"day",
ifelse(jaguar_df$hour==9,"day",
ifelse(jaguar_df$hour==10,"day",
ifelse(jaguar_df$hour==11,"day",
ifelse(jaguar_df$hour==12,"day",
ifelse(jaguar_df$hour==13,"day",
ifelse(jaguar_df$hour==14,"day",
ifelse(jaguar_df$hour==15,"day",
ifelse(jaguar_df$hour==16,"day",
ifelse(jaguar_df$hour==19,"night",
ifelse(jaguar_df$hour==20,"night",
ifelse(jaguar_df$hour==21,"night",
ifelse(jaguar_df$hour==22,"night",
ifelse(jaguar_df$hour==23,"night",
ifelse(jaguar_df$hour==0,"night",
ifelse(jaguar_df$hour==1,"night",
ifelse(jaguar_df$hour==2,"night",
ifelse(jaguar_df$hour==3,"night",
ifelse(jaguar_df$hour==4,"night","riseset"))))))))))))))))))))
#'
#' # More Data checking and cleaning
#'
#' Delete observations where missing lat or long or a timestamp. (There are no missing observations but it is a good practice)
ind<-complete.cases(jaguar_df[,c("y","x","date")])
jaguar_df<-jaguar_df[ind==TRUE,]
#'
#" Check order (data should already be ordered)
jaguar_ord <- jaguar_df[order(jaguar_df$id,jaguar_df$date),]
all.equal(jaguar_df,jaguar_ord)
#'
#' Check for duplicated observations (ones with same lat, long, timestamp,
#'  and individual identifier). No duplicate observations in this data set
ind2<-jaguar_df %>% select("date","x","y","id") %>% duplicated
#' sum(ind2) # no duplicates
jaguar_df<-jaguar_df[ind2!=TRUE,]
#'
#' Clean suspectly close points!!!  Above 1200 secs or 20 min minimal interval
excludes <- filter(jaguar_df, dt < 1200)
removed<- anti_join(jaguar_df, excludes)
jaguar_df <- removed
#'
#'
#'
#'
#' # Add UTMs and Ajust Posix accordingly with timezone
#'
#' Grouping project regions when they occur within the same UTM zone
#' Code with function => crs.convert
#'
#' ###    ATLANTIC FOREST WEST    (Project regions 1 and 2)
#'
#' 1) Atlantic Forest W1
AFW1 <- crs.convert(data = subset(jaguar_df,project_region=='Atlantic Forest W1'),
crs.input = "+proj=longlat +datum=WGS84",
crs.output = "+proj=utm +zone=22K +south +datum=WGS84 +units=m +no_defs",
point.names = c("utm_x", "utm_y", "long_x", "lat_y"))
AFW1$date <- as.character(AFW1$date)
AFW1$date <- as.POSIXct(AFW1$date, format ="%Y-%m-%d %H:%M:%S", tz = "Etc/GMT+3")
#'
#' 2) Atlantic Forest W2
AFW2 <- crs.convert(data =subset(jaguar_df,project_region=='Atlantic Forest W2'),
crs.input = "+proj=longlat +datum=WGS84",
crs.output = "+proj=utm +zone=22K +south +datum=WGS84 +units=m +no_defs",
point.names = c("utm_x", "utm_y", "long_x", "lat_y"))
AFW2$date <- as.character(AFW2$date)
AFW2$date <- as.POSIXct(AFW2$date, format ="%Y-%m-%d %H:%M:%S", tz = "Etc/GMT+3")
#'
#' Atlantic Forest West
AFW=rbind(AFW1,AFW2)
#'
#'
#' ### CAATINGA
#'
#' 3) Caatinga
Caatinga <- crs.convert(data = subset(jaguar_df,project_region=='Caatinga'),
crs.input = "+proj=longlat +datum=WGS84",
crs.output = "+proj=utm +zone=23L +south +datum=WGS84 +units=m +no_defs",
point.names = c("utm_x", "utm_y", "long_x", "lat_y"))
Caatinga$date <- as.character(Caatinga$date)
Caatinga$date <- as.POSIXct(Caatinga$date, format ="%Y-%m-%d %H:%M:%S", tz = "Etc/GMT+3")
#'
#'
#'
#' ### CERRADO   2 Projects (4 and 5)
#'
#' 4)  Cerrado1
#'
Cerrado1<- crs.convert(data = subset(jaguar_df,project_region=='Cerrado1'),
crs.input = "+proj=longlat +datum=WGS84",
crs.output = "+proj=utm +zone=22K +south +datum=WGS84 +units=m +no_defs",
point.names = c("utm_x", "utm_y", "long_x", "lat_y"))
Cerrado1$date <- as.character(Cerrado1$date)
Cerrado1$date <- as.POSIXct(Cerrado1$date, format ="%Y-%m-%d %H:%M:%S", tz = "Etc/GMT+3")
#'
#' 5)  Cerrado2
#'
Cerrado2<- crs.convert(data = subset(jaguar_df,project_region=='Cerrado2'),
crs.input = "+proj=longlat +datum=WGS84",
crs.output = "+proj=utm +zone=22L +south +datum=WGS84 +units=m +no_defs",
point.names = c("utm_x", "utm_y", "long_x", "lat_y"))
Cerrado2$date <- as.character(Cerrado2$date)
Cerrado2$date <- as.POSIXct(Cerrado2$date, format ="%Y-%m-%d %H:%M:%S", tz = "Etc/GMT+3")
Cerrado=rbind(Cerrado1,Cerrado2)
#' Produce an output using ezknitr
ezspin(file = "JaguarDataPrep.R", out_dir = "reports",
params = list("DATASET_NAME" = "jaguar.dat"),
keep_html = TRUE, keep_rmd = TRUE)
open_output_dir()
#' Other info
sessionInfo()
proc.time()
source('~/GitHub/jaguar-codes/R/JaguarDataPrep.R', echo=TRUE)
source('~/GitHub/jaguar-codes/R/JaguarDataPrep.R', echo=TRUE)
source('~/GitHub/jaguar-codes/R/JaguarDataPrep.R', echo=TRUE)
